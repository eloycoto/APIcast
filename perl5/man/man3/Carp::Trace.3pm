.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Carp::Trace 3"
.TH Carp::Trace 3 "2006-04-11" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Carp::Trace \- simple traceback of call stacks
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Carp::Trace;
\&
\&    sub flubber {
\&        die "You took this route to get here:\en" .
\&            trace();
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Carp::Trace provides an easy way to see the route your script took to
get to a certain place. It uses simple \f(CW\*(C`caller\*(C'\fR calls to determine
this.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "trace( [\s-1DEPTH, OFFSET, ARGS\s0] )"
.IX Subsection "trace( [DEPTH, OFFSET, ARGS] )"
\&\f(CW\*(C`trace\*(C'\fR is a function, exported by default, that gives a simple
traceback of how you got where you are. It returns a formatted string,
ready to be sent to \f(CW\*(C`STDOUT\*(C'\fR or \f(CW\*(C`STDERR\*(C'\fR.
.PP
Optionally, you can provide a \s-1DEPTH\s0 argument, which tells \f(CW\*(C`trace\*(C'\fR to
only go back so many levels. The \s-1OFFSET\s0 argument will tell \f(CW\*(C`trace\*(C'\fR to
skip the first [\s-1OFFSET\s0] layers up.
.PP
If you provide a true value for the \f(CW\*(C`ARGS\*(C'\fR parameter, the arguments
passed to each callstack will be dumped using \f(CW\*(C`Data::Dumper\*(C'\fR.
This might slow down your trace, but is very useful for debugging.
.PP
See also the \*(L"Global Variables\*(R" section.
.PP
\&\f(CW\*(C`trace\*(C'\fR is able to tell you the following things:
.IP "\(bu" 4
The name of the function
.IP "\(bu" 4
The number of callstacks from your current location
.IP "\(bu" 4
The context in which the function was called
.IP "\(bu" 4
Whether a new instance of \f(CW@_\fR was created for this function
.IP "\(bu" 4
Whether the function was called in an \f(CW\*(C`eval\*(C'\fR, \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`use\*(C'\fR
.IP "\(bu" 4
If called from a string \f(CW\*(C`eval\*(C'\fR, what the eval-string is
.IP "\(bu" 4
The file the function is in
.IP "\(bu" 4
The line number the function is on
.PP
The output from the following code:
.PP
.Vb 1
\&    use Carp::Trace;
\&
\&    sub foo { bar() };
\&    sub bar { $x = baz() };
\&    sub baz { @y = zot() };
\&    sub zot { print trace() };
\&
\&    eval \*(Aqfoo(1)\*(Aq;
.Ve
.PP
Might look something like this:
.PP
.Vb 10
\&    main::(eval) [5]
\&        foo(1);
\&        void \- no new stash
\&        x.pl line 1
\&    main::foo [4]
\&        void \- new stash
\&        (eval 1) line 1
\&    main::bar [3]
\&        void \- new stash
\&        x.pl line 1
\&    main::baz [2]
\&        scalar \- new stash
\&        x.pl line 1
\&    main::zot [1]
\&        list \- new stash
\&        x.pl line 1
.Ve
.SH "Global Variables"
.IX Header "Global Variables"
.ie n .SS "$Carp::Trace::DEPTH"
.el .SS "\f(CW$Carp::Trace::DEPTH\fP"
.IX Subsection "$Carp::Trace::DEPTH"
Sets the depth to be used by default for \f(CW\*(C`trace\*(C'\fR. Any depth argument
to \f(CW\*(C`trace\*(C'\fR will override this setting.
.ie n .SS "$Carp::Trace::OFFSET"
.el .SS "\f(CW$Carp::Trace::OFFSET\fP"
.IX Subsection "$Carp::Trace::OFFSET"
Sets the offset to be used by default for \f(CW\*(C`trace\*(C'\fR. Any offset
argument to \f(CW\*(C`trace\*(C'\fR will override this setting.
.ie n .SS "$Carp::Trace::ARGUMENTS"
.el .SS "\f(CW$Carp::Trace::ARGUMENTS\fP"
.IX Subsection "$Carp::Trace::ARGUMENTS"
Sets a flag to indicate that a \f(CW\*(C`trace\*(C'\fR should dump all arguments for
every call stack it's printing out. Any \f(CW\*(C`args\*(C'\fR argument to \f(CW\*(C`trace\*(C'\fR
will override this setting.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module by
Jos Boumans <kane@cpan.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is
copyright (c) 2002 Jos Boumans <kane@cpan.org>.
All rights reserved.
.PP
This library is free software;
you may redistribute and/or modify it under the same
terms as Perl itself.
